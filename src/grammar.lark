// EBNF Grammar for D8 assembly files
// Python Lark: https://github.com/lark-parser/lark

program: line+

line: [directive | label | instruction] [comment] "\n"

directive: "."(reset | origin | define | string | byte | array)
reset: "reset" expression
origin: "origin" expression
define: "define" SYMBOL expression
string: "string" SYMBOL ESCAPED_STRING
byte: "byte" SYMBOL expression
array: "array" SYMBOL "{" expression ("," expression)* "}"

label: SYMBOL ":" [instruction]

instruction: "ADC" REG "," REG "," REG          -> adc
           | "ADD" REG "," REG "," REG          -> add
           | "AND" REG "," REG "," REG          -> and
           | "BCC" expression                   -> bcc
           | "BCS" expression                   -> bcs
           | "BEQ" expression                   -> beq
           | "BNE" expression                   -> bne
           | "BRA" expression                   -> bra
           | "BSR" expression                   -> bsr
           | "CLC"                              -> clc 
           | "CLR" REG                          -> clr
           | "CMP" REG "," REG                  -> cmp
           | "DEC" REG ["," REG]                -> dec
           | "INC" REG ["," REG]                -> inc
           | "LD" REG "," "#" expression        -> ldi
           | "LD" REG "," "&" expression        -> ldi
           | "LD" REG "," expression            -> ldd
           | "LD" REG "," "X" "," expression    -> ldx
           | "LD" REG "," "SP" "," expression   -> ldsp
           | "MOV" REG "," REG                  -> mov
           | "NOP"                              -> nop
           | "NOT" REG ["," REG]                -> not
           | "OR" REG "," REG "," REG           -> or
           | "PSH" REG                          -> psh
           | "PUL" REG                          -> pul
           | "ROLC" REG ["," REG]               -> rolc
           | "RORC" REG ["," REG]               -> rorc
           | "RTS"                              -> rts
           | "ST" REG "," expression            -> std
           | "ST" REG "," "X" "," expression    -> stx
           | "ST" REG "," "SP" "," expression   -> stsp
           | "SEC"                              -> sec
           | "STOP"                             -> stop
           | "SBB" REG "," REG "," REG          -> sbb
           | "XOR" REG "," REG "," REG          -> xor

comment: COMMENT_STRING
COMMENT_STRING: /;.*/

?expression: product
    | expression "+" product -> add
    | expression "-" product -> sub

?product: atom
    | product "*" product -> mul
    | product "/" product -> div

?atom: literal
    | "-" atom  -> neg
    | SYMBOL -> symbol
    | "(" expression ")"

?literal: INT -> integer
    | HEX -> hex
    | "\"" CHAR "\"" -> char

HEX: /0x[0-9a-fA-F]+/
CHAR: /[ -~]/

REG: "A" | "B" | "C" | "D" | "E" | "PAGE" | "X" | "SP"

%import common.INT
%import common.HEXDIGIT
%import common.ESCAPED_STRING
%import common.CNAME -> SYMBOL
%import common.WS_INLINE
%ignore WS_INLINE
